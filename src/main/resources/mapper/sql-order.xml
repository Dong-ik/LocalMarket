<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.localmarket.repository.OrderMapper">

    <!-- Order 결과 매핑 -->
    <resultMap id="orderResultMap" type="com.localmarket.domain.Order">
        <id property="orderId" column="order_id"/>
        <result property="memberNum" column="member_num"/>
        <result property="orderTotalPrice" column="order_total_price"/>
        <result property="orderStatus" column="order_status"/>
        <result property="orderDate" column="order_date"/>
        <result property="deliveryAddress" column="delivery_address"/>
        <result property="deliveryPhone" column="delivery_phone"/>
        <result property="requestMessage" column="request_message"/>
        <result property="paymentMethod" column="payment_method"/>
        <result property="paymentStatus" column="payment_status"/>
        <result property="paymentDate" column="payment_date"/>
        <result property="transactionId" column="transaction_id"/>
        <result property="memberName" column="member_name"/>
        <result property="memberId" column="member_id"/>
        <result property="orderItemCount" column="order_item_count"/>
    </resultMap>

    <!-- 주문 등록 -->
    <insert id="insertOrder" parameterType="com.localmarket.dto.OrderDto" 
            useGeneratedKeys="true" keyProperty="orderId">
        INSERT INTO orders (
            member_num, 
            order_total_price, 
            order_status, 
            order_date, 
            delivery_address, 
            delivery_phone, 
            request_message, 
            payment_method, 
            payment_status, 
            payment_date, 
            transaction_id
        ) VALUES (
            #{memberNum}, 
            #{orderTotalPrice}, 
            #{orderStatus}, 
            #{orderDate}, 
            #{deliveryAddress}, 
            #{deliveryPhone}, 
            #{requestMessage}, 
            #{paymentMethod}, 
            #{paymentStatus}, 
            #{paymentDate}, 
            #{transactionId}
        )
    </insert>

    <!-- 주문 조회 (ID별) -->
    <select id="selectOrderById" parameterType="Integer" resultMap="orderResultMap">
        SELECT 
            o.order_id,
            o.member_num,
            o.order_total_price,
            o.order_status,
            o.order_date,
            o.delivery_address,
            o.delivery_phone,
            o.request_message,
            o.payment_method,
            o.payment_status,
            o.payment_date,
            o.transaction_id,
            m.member_name,
            m.member_id,
            (SELECT COUNT(*) FROM order_detail od WHERE od.order_id = o.order_id) as order_item_count
        FROM orders o
        INNER JOIN member m ON o.member_num = m.member_num
        WHERE o.order_id = #{orderId}
    </select>

    <!-- 회원별 주문 목록 조회 -->
    <select id="selectOrdersByMemberNum" parameterType="Integer" resultMap="orderResultMap">
        SELECT 
            o.order_id,
            o.member_num,
            o.order_total_price,
            o.order_status,
            o.order_date,
            o.delivery_address,
            o.delivery_phone,
            o.request_message,
            o.payment_method,
            o.payment_status,
            o.payment_date,
            o.transaction_id,
            m.member_name,
            m.member_id,
            (SELECT COUNT(*) FROM order_detail od WHERE od.order_id = o.order_id) as order_item_count
        FROM orders o
        INNER JOIN member m ON o.member_num = m.member_num
        WHERE o.member_num = #{memberNum}
        ORDER BY o.order_date DESC
    </select>

    <!-- 주문 상태별 조회 -->
    <select id="selectOrdersByStatus" parameterType="String" resultMap="orderResultMap">
        SELECT 
            o.order_id,
            o.member_num,
            o.order_total_price,
            o.order_status,
            o.order_date,
            o.delivery_address,
            o.delivery_phone,
            o.request_message,
            o.payment_method,
            o.payment_status,
            o.payment_date,
            o.transaction_id,
            m.member_name,
            m.member_id,
            (SELECT COUNT(*) FROM order_detail od WHERE od.order_id = o.order_id) as order_item_count
        FROM orders o
        INNER JOIN member m ON o.member_num = m.member_num
        WHERE o.order_status = #{orderStatus}
        ORDER BY o.order_date DESC
    </select>

    <!-- 전체 주문 목록 조회 -->
    <select id="selectAllOrders" resultMap="orderResultMap">
        SELECT 
            o.order_id,
            o.member_num,
            o.order_total_price,
            o.order_status,
            o.order_date,
            o.delivery_address,
            o.delivery_phone,
            o.request_message,
            o.payment_method,
            o.payment_status,
            o.payment_date,
            o.transaction_id,
            m.member_name,
            m.member_id,
            (SELECT COUNT(*) FROM order_detail od WHERE od.order_id = o.order_id) as order_item_count
        FROM orders o
        INNER JOIN member m ON o.member_num = m.member_num
        ORDER BY o.order_date DESC
    </select>

    <!-- 주문 상태 수정 -->
    <update id="updateOrderStatus">
        UPDATE orders 
        SET order_status = #{orderStatus}
        WHERE order_id = #{orderId}
    </update>

    <!-- 결제 정보 수정 -->
    <update id="updatePaymentInfo">
        UPDATE orders 
        SET payment_method = #{paymentMethod},
            payment_status = #{paymentStatus},
            payment_date = NOW(),
            transaction_id = #{transactionId}
        WHERE order_id = #{orderId}
    </update>

    <!-- 배송지 정보 수정 -->
    <update id="updateDeliveryInfo">
        UPDATE orders 
        SET delivery_address = #{deliveryAddress},
            delivery_phone = #{deliveryPhone},
            request_message = #{requestMessage}
        WHERE order_id = #{orderId}
    </update>

    <!-- 주문 취소 -->
    <update id="updateOrderCancel">
        UPDATE orders 
        SET order_status = 'CANCELLED',
            payment_status = 'CANCELLED'
        WHERE order_id = #{orderId}
    </update>

    <!-- 주문 삭제 -->
    <delete id="deleteOrder" parameterType="Integer">
        DELETE FROM orders 
        WHERE order_id = #{orderId}
    </delete>

    <!-- 주문 통계 조회 -->
    <select id="selectOrderStatistics" resultMap="orderResultMap">
        SELECT 
            o.order_status,
            COUNT(*) as order_item_count,
            SUM(o.order_total_price) as order_total_price,
            DATE(o.order_date) as order_date
        FROM orders o
        WHERE o.order_date >= DATE_SUB(NOW(), INTERVAL 30 DAY)
        GROUP BY o.order_status, DATE(o.order_date)
        ORDER BY o.order_date DESC
    </select>

    <!-- 기간별 주문 조회 -->
    <select id="selectOrdersByDateRange" resultMap="orderResultMap">
        SELECT 
            o.order_id,
            o.member_num,
            o.order_total_price,
            o.order_status,
            o.order_date,
            o.delivery_address,
            o.delivery_phone,
            o.request_message,
            o.payment_method,
            o.payment_status,
            o.payment_date,
            o.transaction_id,
            m.member_name,
            m.member_id,
            (SELECT COUNT(*) FROM order_detail od WHERE od.order_id = o.order_id) as order_item_count
        FROM orders o
        INNER JOIN member m ON o.member_num = m.member_num
        WHERE DATE(o.order_date) BETWEEN #{startDate} AND #{endDate}
        ORDER BY o.order_date DESC
    </select>

    <!-- 결제 완료된 주문 조회 -->
    <select id="selectCompletedOrders" parameterType="Integer" resultMap="orderResultMap">
        SELECT 
            o.order_id,
            o.member_num,
            o.order_total_price,
            o.order_status,
            o.order_date,
            o.delivery_address,
            o.delivery_phone,
            o.request_message,
            o.payment_method,
            o.payment_status,
            o.payment_date,
            o.transaction_id,
            m.member_name,
            m.member_id,
            (SELECT COUNT(*) FROM order_detail od WHERE od.order_id = o.order_id) as order_item_count
        FROM orders o
        INNER JOIN member m ON o.member_num = m.member_num
        WHERE o.member_num = #{memberNum}
        AND o.payment_status = 'COMPLETED'
        ORDER BY o.order_date DESC
    </select>

    <!-- 주문 검색 -->
    <select id="selectOrdersByKeyword" parameterType="String" resultMap="orderResultMap">
        SELECT 
            o.order_id,
            o.member_num,
            o.order_total_price,
            o.order_status,
            o.order_date,
            o.delivery_address,
            o.delivery_phone,
            o.request_message,
            o.payment_method,
            o.payment_status,
            o.payment_date,
            o.transaction_id,
            m.member_name,
            m.member_id,
            (SELECT COUNT(*) FROM order_detail od WHERE od.order_id = o.order_id) as order_item_count
        FROM orders o
        INNER JOIN member m ON o.member_num = m.member_num
        WHERE m.member_name LIKE CONCAT('%', #{keyword}, '%')
           OR m.member_id LIKE CONCAT('%', #{keyword}, '%')
           OR o.order_id LIKE CONCAT('%', #{keyword}, '%')
           OR o.transaction_id LIKE CONCAT('%', #{keyword}, '%')
        ORDER BY o.order_date DESC
    </select>

</mapper>