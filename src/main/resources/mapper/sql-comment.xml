<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.localmarket.mapper.CommentMapper">

    <!-- Comment 결과 매핑 -->
    <resultMap id="CommentResultMap" type="com.localmarket.domain.Comment">
        <id property="commentId" column="comment_id"/>
        <result property="boardId" column="board_id"/>
        <result property="memberNum" column="member_num"/>
        <result property="parentCommentId" column="parent_comment_id"/>
        <result property="commentContent" column="comment_content"/>
        <result property="likeCnt" column="like_cnt"/>
        <result property="createdDate" column="created_date"/>
        <result property="updatedDate" column="updated_date"/>
        <!-- JOIN 필드들 -->
        <result property="memberName" column="member_name"/>
        <result property="boardTitle" column="board_title"/>
        <result property="parentMemberName" column="parent_member_name"/>
        <result property="depth" column="depth"/>
    </resultMap>

    <!-- 댓글 등록 -->
    <insert id="insertComment" parameterType="com.localmarket.dto.CommentDto" useGeneratedKeys="true" keyProperty="commentId">
        INSERT INTO comment (
            board_id,
            member_num,
            parent_comment_id,
            comment_content,
            like_cnt,
            created_date,
            updated_date
        ) VALUES (
            #{boardId},
            #{memberNum},
            #{parentCommentId},
            #{commentContent},
            COALESCE(#{likeCnt}, 0),
            NOW(),
            NOW()
        )
    </insert>

    <!-- 댓글 조회 (ID별) -->
    <select id="selectCommentById" resultMap="CommentResultMap">
        SELECT 
            c.comment_id,
            c.board_id,
            c.member_num,
            c.parent_comment_id,
            c.comment_content,
            c.like_cnt,
            c.created_date,
            c.updated_date,
            m.member_name,
            b.board_title,
            pm.member_name as parent_member_name,
            CASE 
                WHEN c.parent_comment_id IS NULL THEN 0 
                ELSE 1 
            END as depth
        FROM comment c
        INNER JOIN member m ON c.member_num = m.member_num
        INNER JOIN board b ON c.board_id = b.board_id
        LEFT JOIN comment pc ON c.parent_comment_id = pc.comment_id
        LEFT JOIN member pm ON pc.member_num = pm.member_num
        WHERE c.comment_id = #{commentId}
    </select>

    <!-- 게시글별 댓글 목록 조회 (계층형 구조) -->
    <select id="selectCommentsByBoardId" resultMap="CommentResultMap">
        SELECT 
            c.comment_id,
            c.board_id,
            c.member_num,
            c.parent_comment_id,
            c.comment_content,
            c.like_cnt,
            c.created_date,
            c.updated_date,
            m.member_name,
            b.board_title,
            pm.member_name as parent_member_name,
            CASE 
                WHEN c.parent_comment_id IS NULL THEN 0 
                ELSE 1 
            END as depth
        FROM comment c
        INNER JOIN member m ON c.member_num = m.member_num
        INNER JOIN board b ON c.board_id = b.board_id
        LEFT JOIN comment pc ON c.parent_comment_id = pc.comment_id
        LEFT JOIN member pm ON pc.member_num = pm.member_num
        WHERE c.board_id = #{boardId}
        ORDER BY 
            COALESCE(c.parent_comment_id, c.comment_id) ASC,
            c.parent_comment_id ASC,
            c.created_date ASC
    </select>

    <!-- 부모 댓글별 대댓글 조회 -->
    <select id="selectRepliesByParentId" resultMap="CommentResultMap">
        SELECT 
            c.comment_id,
            c.board_id,
            c.member_num,
            c.parent_comment_id,
            c.comment_content,
            c.like_cnt,
            c.created_date,
            c.updated_date,
            m.member_name,
            b.board_title,
            pm.member_name as parent_member_name,
            1 as depth
        FROM comment c
        INNER JOIN member m ON c.member_num = m.member_num
        INNER JOIN board b ON c.board_id = b.board_id
        INNER JOIN comment pc ON c.parent_comment_id = pc.comment_id
        INNER JOIN member pm ON pc.member_num = pm.member_num
        WHERE c.parent_comment_id = #{parentCommentId}
        ORDER BY c.created_date ASC
    </select>

    <!-- 회원별 댓글 조회 -->
    <select id="selectCommentsByMemberNum" resultMap="CommentResultMap">
        SELECT 
            c.comment_id,
            c.board_id,
            c.member_num,
            c.parent_comment_id,
            c.comment_content,
            c.like_cnt,
            c.created_date,
            c.updated_date,
            m.member_name,
            b.board_title,
            pm.member_name as parent_member_name,
            CASE 
                WHEN c.parent_comment_id IS NULL THEN 0 
                ELSE 1 
            END as depth
        FROM comment c
        INNER JOIN member m ON c.member_num = m.member_num
        INNER JOIN board b ON c.board_id = b.board_id
        LEFT JOIN comment pc ON c.parent_comment_id = pc.comment_id
        LEFT JOIN member pm ON pc.member_num = pm.member_num
        WHERE c.member_num = #{memberNum}
        ORDER BY c.created_date DESC
    </select>

    <!-- 전체 댓글 목록 조회 -->
    <select id="selectAllComments" resultMap="CommentResultMap">
        SELECT 
            c.comment_id,
            c.board_id,
            c.member_num,
            c.parent_comment_id,
            c.comment_content,
            c.like_cnt,
            c.created_date,
            c.updated_date,
            m.member_name,
            b.board_title,
            pm.member_name as parent_member_name,
            CASE 
                WHEN c.parent_comment_id IS NULL THEN 0 
                ELSE 1 
            END as depth
        FROM comment c
        INNER JOIN member m ON c.member_num = m.member_num
        INNER JOIN board b ON c.board_id = b.board_id
        LEFT JOIN comment pc ON c.parent_comment_id = pc.comment_id
        LEFT JOIN member pm ON pc.member_num = pm.member_num
        ORDER BY c.created_date DESC
    </select>

    <!-- 댓글 수정 -->
    <update id="updateComment" parameterType="com.localmarket.dto.CommentDto">
        UPDATE comment 
        SET 
            comment_content = #{commentContent},
            updated_date = NOW()
        WHERE comment_id = #{commentId}
    </update>

    <!-- 댓글 삭제 (단일) -->
    <delete id="deleteComment">
        DELETE FROM comment 
        WHERE comment_id = #{commentId}
    </delete>

    <!-- 댓글과 모든 대댓글 삭제 -->
    <delete id="deleteCommentWithReplies">
        DELETE FROM comment 
        WHERE comment_id = #{commentId} 
           OR parent_comment_id = #{commentId}
    </delete>

    <!-- 좋아요 수 증가/감소 -->
    <update id="updateCommentLikeCount">
        UPDATE comment 
        SET like_cnt = GREATEST(0, like_cnt + #{increment})
        WHERE comment_id = #{commentId}
    </update>

    <!-- 게시글별 댓글 수 조회 -->
    <select id="selectCommentCountByBoardId" resultType="int">
        SELECT COUNT(*) 
        FROM comment 
        WHERE board_id = #{boardId}
    </select>

    <!-- 댓글 검색 -->
    <select id="searchComments" resultMap="CommentResultMap">
        SELECT 
            c.comment_id,
            c.board_id,
            c.member_num,
            c.parent_comment_id,
            c.comment_content,
            c.like_cnt,
            c.created_date,
            c.updated_date,
            m.member_name,
            b.board_title,
            pm.member_name as parent_member_name,
            CASE 
                WHEN c.parent_comment_id IS NULL THEN 0 
                ELSE 1 
            END as depth
        FROM comment c
        INNER JOIN member m ON c.member_num = m.member_num
        INNER JOIN board b ON c.board_id = b.board_id
        LEFT JOIN comment pc ON c.parent_comment_id = pc.comment_id
        LEFT JOIN member pm ON pc.member_num = pm.member_num
        WHERE c.comment_content LIKE CONCAT('%', #{keyword}, '%')
           OR m.member_name LIKE CONCAT('%', #{keyword}, '%')
           OR b.board_title LIKE CONCAT('%', #{keyword}, '%')
        ORDER BY c.created_date DESC
    </select>

    <!-- 최신 댓글 조회 -->
    <select id="selectRecentComments" resultMap="CommentResultMap">
        SELECT 
            c.comment_id,
            c.board_id,
            c.member_num,
            c.parent_comment_id,
            c.comment_content,
            c.like_cnt,
            c.created_date,
            c.updated_date,
            m.member_name,
            b.board_title,
            pm.member_name as parent_member_name,
            CASE 
                WHEN c.parent_comment_id IS NULL THEN 0 
                ELSE 1 
            END as depth
        FROM comment c
        INNER JOIN member m ON c.member_num = m.member_num
        INNER JOIN board b ON c.board_id = b.board_id
        LEFT JOIN comment pc ON c.parent_comment_id = pc.comment_id
        LEFT JOIN member pm ON pc.member_num = pm.member_num
        ORDER BY c.created_date DESC
        LIMIT #{limit}
    </select>

</mapper>